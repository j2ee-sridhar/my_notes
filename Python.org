* Index
- [[*特点][特点]]
- [[*调用解释器][调用解释器]]
  - [[*参数传递][参数传递]]
  - [[*交互模式][交互模式]]
  - [[*错误处理][错误处理]]
  - [[*编写脚本][编写脚本]]
  - [[*源代码编码][源代码编码]]
  - [[*交互式启动文件][交互式启动文件]]
  - [[*定制模块][定制模块]]
- [[*字符串][字符串]]
- [[*变量与对象][变量与对象]]
- [[*列表][列表]]
- [[*控制流][控制流]]
  - [[*if][if]]
  - [[*for][for]]
  - [[*range()函式][range()函式]]
  - [[*break, continue, 循环中的else][break, continue, 循环中的else]]
  - [[*pass][pass]]
  - [[*定义函式][定义函式]]
  - [[*深入函式定义][深入函式定义]]
    - [[*默认参数][默认参数]]
    - [[*关键字参数][关键字参数]]
    - [[*任意参数表][任意参数表]]
    - [[*释放参数列表][释放参数列表]]
    - [[*Lambda形式][Lambda形式]]
    - [[*文档字符串][文档字符串]]
  - [[*代码风格][代码风格]]
- [[*数据结构][数据结构]]
  - [[*深入列表][深入列表]]
    - [[*列表推导式][列表推导式]]
    - [[*嵌套列表推导式][嵌套列表推导式]]
  - [[*del语句][del语句]]
  - [[*元组和序列][元组和序列]]
  - [[*集合][集合]]
  - [[*字典][字典]]
  - [[*遍历技巧][遍历技巧]]
  - [[*深入条件控制][深入条件控制]]
  - [[*序列与其它类型的比较][序列与其它类型的比较]]
- [[*模块][模块]]
  - [[*深入模块][深入模块]]
    - [[*把模块当脚本执行][把模块当脚本执行]]
    - [[*模块搜索路径][模块搜索路径]]
    - [[*已编译的Python文件][已编译的Python文件]]
  - [[*dir()函式][dir()函式]]
  - [[*包][包]]
    - [[*从包中导入*][从包中导入*]]
    - [[*内部包参考][内部包参考]]
    - [[*多目录的包][多目录的包]]

* 特点
Python是可扩展的:
1. 可以为解释器添加新的内建函式或模块
2. 可以链接到必要的二进制架构

即相当于集成进别的语言写的程序,而把Python当做这个程序的扩展或命令行语
言.

* 调用解释器
类似bash, 也可以用以下方法来执行命令
=python -c 'command' [arg]=
而对于模块,可以用
=python -m module [arg]=

** 参数传递
调用解释器时,脚本名和参数表会传入到一个名为 *sys.argv* 的字符串列表中.
- 如果没有给定脚本和参数,则sys.argv中有一个空字符串元素
- 脚本名为 '-' 时(表示标准输入), sys.argv[0]为 '-'
- 使用-c时, [0]为'-c'
- 使用-m时, [0]为模块的全名
- -c command 或 -m module 之后的参数不会被Python解释器的选项处理机制截
  获,而是会留在sys.argv中,供命令或模块操作.

** 交互模式
shell中可以使用Ctrl-D或是quit()退出
主提示符为 >>> 可以通过sys.ps1和sys.ps2修改
续行则为 ...
最后一个(算术)表达式的值会被分配给变量 _  ,类似 $?, 对它赋值会使其失去
该功能.

** 错误处理
如果有错误发生,则解释器会输出错误信息和栈跟踪.交互模式下会返回到主提示
符,而文件输入执行,则会打印栈跟踪后以非零状态退出.所有的错误信息都写入
标准错误流,而普通输出则写入标准输出流.

*此处的错误与try中的异常并不一样.*

在主提示符或从属提示符中中输入中断符(Ctrl-C)可以取消当前输入,加到主提
示符.而在执行命令时输入中断符,则会抛出一个 KeyboardInterrupt异常.

** 编写脚本
类BSD的UNIX系统中,可以在脚本第一行进行如下声明,前提是pyhton的解释器位
于PATH变量中如下
=#! /usr/bin/env python3.2=

windows中,py脚本会自动绑定python.exe,如果后缀名为pyw,则不会打开console

** 源代码编码
默认情况下,源代码会以UTF-8编码,而标准库中的所有可移植代码都仅使用ASCII
字符编码
可以在#!行后面,通过以下方式指定不同的编码,
# -*- coding: encoding -*-

这个声明必须 *在代码文件中的第一行或第二行*

** 交互式启动文件
通过声明 *PYTHONSTARTUP* 变量,指向一个包含启动命令的文件, 类似
shell的.profile文件.

这个文件只在交互式的启动中才被会读取,在执行脚本或显式地以/dev/tty为输
入源时,则不会使用.该文件与解释器执行的命令处在同一个命名空间中,它所定
义或引用的一切都可以在解释器的不爱限制地使用.

#+BEGIN_SRC python
  import os
  filename = os.environ.get('PYTHONSTARTUP')
  if filename and os.path.isfile(filename):
      exec(open(filename).read())
#+END_SRC

** 定制模块
Python默认提供两个hook来定制交互环境
*sitecustomize* 和 *usercustomize*

#+BEGIN_SRC python
  import site
  site.getusersitepackages()
  '/home/usr/.local/lib/python3.2/site-packages'
#+END_SRC

此时,user site-package目录下的usercustomize.py里的所有东西都会在Python
调用时导入,除非使用了 -s 来禁用自动导入功能.

sitecustomize与上述相同,但其是在全局的site-packages目录下创建,且在
usercustomize之前被导入.

* 字符串
- 当且仅当字符串中包含单引号,且没有双引号时,解释器会以双引号打印它.
- 可以在行的最后使用 \ 来定义跨行字符串
- 跨行字符串中仍然需要使用\n来获得换行效果
- 可以使用 ''' 或 """ 来定义跨行字符串,此时不需要\ 和 \n
- 字符串前加 r 表示该字符串 "未处理" , 此时 \和\n 都会当成数据包含在字
  符串里.
- 'A''pple' 的链接方法仅限于常量
- 不没字符类型,一个字符就是一个长度为一的字符串
- 可以使用切片截获字符串,如 a[1:2], a[:2], a[2:], 太大的索引会自动替换
  成字符串的最大索引,而上界比下界小则会返回空字符串.
- 可以使用负值切符,此时从右边算起. -1返回最后一个字符,而-0则与0一
  样. 对小于100的字符串 [-100:] 会返回整串, 但[-100]则会产生错误
- 字符串定义后,不能改变. 对字符串的索引位置赋值会产生错误
- 对于Unicode字符, 'Hello\u0020World!' 则插入了0x0020序号值的字符.
  另外可以使用 "xxx".encode('utf-8')来转换得到字符串字节序列
- 空串为假
* 变量与对象
*变量无类型,对象有类型*

变量不须提前声明,只需在用的时候给它赋值,不能单独声明变量而不赋值

变量纯粹只是引用内存中分配的各种对象,因此变量无类型,对象才有.
*没有引用的对象会被回收*

# a=[1,2,3]
# b=[1,2,3]
# a==b
## True
# a is b
# False
# a[1]=22
# b 输出仍是[1,2,3]

# a=b[:] #进行了复制
# a=b.copy() # 类似
另外,小数字及短字符串也是共用的,即 is 为True.

* 列表
# a = ['spam', 'eggs', 100, 1234]
- 列表的索引,切片,连接与字符串操作类似
- 3*a[:3] 返回首三项重复3次的新列表
- 切片操作回返的是新的列表,故可以用a[:]来浅复制
- 不同于字符串,列表中的元素可以改变,也可以对切片赋值,此时会变量列表的
  大小, a[len(a):]=[1] 则相当于append了个元素
- len()函数对列表同样可以返回长度
- 可以使用[][]来对嵌套列表操作
- 空序列为假,非零为真

* 控制流

** if
可以有零个或多个elif分支,else是可选的,
#+BEGIN_SRC python
  if x < 0:
      x = 0
      print('Negative changed to zero')
  elif x == 0:
      print('Zero')
  elif x == 1:
      print('Single')
  else:
      print('More')
#+END_SRC

** for
for语句在任意序列(列表或字符串)中迭代时,总是按照元素在序列中的出现顺序
依次迭代. 如果需要在循环体中修改迭代的序列,建议制作一个副本,python不会
自动隐式地创建一个副本.

#+BEGIN_SRC python
  for x in a[:]:
      if len(x) > 6: a.insert(0,x)
#+END_SRC

** range()函式
该方法可以方便地产生等差数列

#+BEGIN_SRC python
  for i in range(5):
      print (i)     # 会输出0 1 2 3 4, 5不会包含在序列本身

  # 也可以指定增量
  range(5, 10)  # 即从5到9

  range(0, 10, 3) # 即 0 3 6 9

  range(-10, -100, -30) # -10 -40 -70
#+END_SRC
range()是一个可迭代对象,它可以返回一些连续的项,但它并没有创建一个列表
(节省空间).

这种迭代对象可以作为for 或 list 的目标.
# list(range(5))
会输出一个包含0到4的列表.

** break, continue, 循环中的else
循环语句中可以有一个else,只有在循环自然结束--不被break的情况下会被执行.

#+BEGIN_SRC python
  for n in range(2, 10):
      for x in range(2, n):
          if n % x == 0:
              print(n, 'equals ', x, '*', n//x)
              break
      else:
          print(n, 'is a prime')
#+END_SRC

continue 与其他语言一样.

** pass
该语句什么都不做,当语法上需要一个语句,但程序不要动作时,就可以使用它

#+BEGIN_SRC python
  while True:
      pass # 忙等待键盘中断 (ctrl+c)

  class MyEmptyClass:
      pass  # 创建最小类

  def initlog(*args):
      pass # TODO 等待实现,
#+END_SRC

** 定义函式
打印斐波那契数列
#+BEGIN_SRC python
  #! /usr/bin/env python3.4
  def fib(n):
      a, b = 0, 1
      while a < n:
          print(a, end=' ')  # 仅适用于python3 以上
          a, b = b, a+b
      print()


  fib(20)
#+END_SRC

def 关键字引入一个函式定义
函式体的第一个语句可以是字串,即函式的文档字符串--docstring ,这些字符串
日后可以转化为在线文档

执行函式会引入新的符号表用于该函式的局部变量.
*变量的引用的查找顺序为*
1. 局部符号表
2. 闭包函式的局部符号表
3. 全局变量
4. 内建名字表

因此, *函式中可以引用全局变量,却不能直接赋值* (会被覆盖,除非使用global
语句)

*函式的参数按值传递,即该对象所指向的引用*

函数本身可以被引用,如
# f = fib
# f(100)

函式即使没有return,也会有返回值--None

*方法* 是属于一个对象并且被命名为 obj.methodname 的函式

*Python中为对象编写接口,而不是数据类型*

** 深入函式定义

*** 默认参数
# t=1
# def fun(a, b=1, c='abc', d=t):

调用的时候则可以不给,或只给部分参数.

*默认参数只会被求值一次*, 如果该参数是一个可变对象的引用,则会有累积效
果
#+BEGIN_SRC python
  def f(a, L=[]):
      L.append(a)
      return L
  print(f(1))
  print(f(2))
  print(f(3))

  # 会输出
  # [1]
  # [1,2]
  # [1,2,3]

  # 否则需要改成这样
  def f(a, L=None):
      if L is None:
          L = []
      L.append(a)
      returnL
#+END_SRC

*** 关键字参数
函式也可以通过variable=value的形式来调用, 但其必须位于正常参数后面

#+BEGIN_SRC python
  def fun(a,b=1,c=2)

  fun('abc')
  fun(b=2,a=1)
  fun(1,c='3')
  fun(1,2,3)

  # 但下面的是错误的
  fun()        # 缺少必要参数
  fun(1,b=2,3) # 正常参数不能在关键字参数后面
  fun(1, a=1)  # 重复给值
  fun(1, t=1)     # 未知参数
#+END_SRC

如果最后个形参是 **name 这样的,则去除其他形参的值,它将以字典的形式包含
所有剩余关键字参数. 可以与*name一直起用,但*name必须在前面,
#+BEGIN_SRC python
  def cheeseshop(kind, *arguments, **keywords):
      print("-- Do you have any", kind, "?")
      print("-- I'm sorry, we're all out of", kind)
      for arg in arguments:
          print(arg)
      print("-" *40)
      keys = sorted(keywords.keys())
      for kw in keys:
          print(kw, ":", keywords[kw])

  cheeseshop("Limburger", "It's very runny, sir",
             "It's really very, VERY runny, sir",
             shopkeeper = "Michael Palin",
             client = "John Cleese",
             sketch = "Cheese Shop Sketch")
#+END_SRC
注意上面例子中对keys进行了排序,否则,其顺序是不确定的.

*** 任意参数表
可以使用*name来接受任意数量的参数,传递进来的参数会被包装进一个元组.
该参数通常位于形参列表的最后,以便接收所有剩余参数,所有出现在它后面的只
能是关键字参数
# def concat(*args, sep="/"): return sep.join(args)
# conat("earch", "mars", "venus")
# concat("earth", "mars", "venus", sep=".")

*** 释放参数列表
也存在相反的情况,需要把列表或元组中的数据传给形参,则反过来,在调用的时
候使用, * 和**
#+BEGIN_SRC python
  list(range(3, 6))
  # [3, 4, 5]

  args = [3, 6]
  list(range(*args))
  # [3 ,4 ,5]

  def parrot(voltage, state='a stiff', action='voom')
  d = {'voltage': 'four milloin', 'state': 'bleedin', 'action': 'VOOM'}
  parrot(**d)
#+END_SRC

*** Lambda形式
# lambda a, b: a+b

*** 文档字符串
第一行总应当是对该对象的目的进行简述.追求简短,大写字母开关,句号结束.
如果不止一行,则第二行应该为空,其后接更详细的描述,如调用条件,边界效应


#+BEGIN_SRC python
  def my_function():
      """Do nothing, but document it.

      No, really, it doesn't do anything.
      """
      pass
#+END_SRC

** 代码风格
- 使用4格缩进,且不制表符
- 自动换行,使其不超过79个字符
- 使用空行分隔函式和类,以及函式中的大的代码块
- 尽可能令注释独占一行
- 使用文档字符串
- 操作符两边留空格,逗号后面空格,括号内部不空格
- 保持类名与函式名的一致性.类名使用CamelCase格式,方法及函式名使用
  lower_case_with_underscres格式.永远使用self作为方法的第一个参数名
- 国际化使用UTF-8
- 如果不使用其他语言,标识符里只使用ASCII字符.

* 数据结构

** 深入列表
- list.append(x) :: a[len(a):]=[x]
- list.extend(L) :: a[len(a):]=L
- list.insert(i, x) :: a.insert(len(a),x ) = a.append(x)
- list.remove(x) :: 移除第一个匹配项,如果没有会报错
- list.pop([i]) :: 删除列表给定位置的项,并返回它.没有给定,则删除最后一个
- list.index(x) :: 返回第一个匹配项的下标,没有则报错
- list.count(x) :: x的出现次数
- list.sort() :: 就地排序
- list.reverse() :: 就地反转

1. 只使用 append 和 pop 可以把列表当作堆栈
2. 只使用 append 和 popleft 可以把列表当作队列

*** 列表推导式
用于从序列中创建列表的简便途径
在方括号里面先写一个表达式,然后接一个for子句,然后是零个或更多的for或if
子句
#+BEGIN_SRC python
  vec = [2, 4, 6]
  [[x, x**2] for x in vec]
  # [[2, 4], [4, 16], [6, 36]

  [3*x for x in vec if x > 3]
  # [12, 18]

  vec1 = [2, 4, 6]
  vec2 = [4, 3, -9]
  [x*y for x in vec1 for y in vec2]
  #[8, 6, -18, 16, 12, -36, 24, 18, -54]

  [str(round(356/113, i)) for i in range(1, 6)]
  # ['3.1', '3.14', '3,142', '3,1416', 3.14159']
#+END_SRC

*** 嵌套列表推导式
#+BEGIN_SRC python
  mat = [
      [1, 2, 3] ,
      [4, 5, 6] ,
      [7, 8, 9],
      ]

  print([[row[i] for row in mat] for i in [0, 1, 2]])
  # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]  可以考虑从右往左读

  # 等价于
  list(zip(*mat))
#+END_SRC

** del语句
del 可以用来移除列表中的切片,或者清除整个列表
#+BEGIN_SRC python
  a = [-1, 1, 66.25, 333, 333, 1234.5]
  del a[0]
  # a= [1, 66.25, 333, 333, 1234.5]
  del a[2:4]
  # a= [1, 66.25, 1234.5]
  del a[:]
  # a = []
  del a
  # 引用a会错误
#+END_SRC

** 元组和序列
列表和字符串都是序列数据类型的例子,因此他们有相似的索引和切片操作
元组则是另一种标准的序列数据类型
*元组由若干逗号分隔的值组成*

#+BEGIN_SRC python
  t = 12345, 54321, 'hello'
  t[0]
  # 12345
  t
  #(12345, 54321, 'hello')
  u = t, (1, 2, 3, 4, 5)
  u
  # ((12345, 54321, 'hello'), (1, 2, 3, 4, 5))
#+END_SRC

元组在输出时会自动加入圆括号,而在输入时则可加可不加
元组与字串一样, *都是不可变的* : 无法对元组指定项进行赋值,但可以通过切
片连接来模拟,另外,元组中也可以包含可变对象,如列表.

构造只包含一个或零个项的元组可以通过以下语法,
#+BEGIN_SRC python
  empty = ()
  singleton = 'hello',
  len(empty)
  # 0
  # singleton = ('hello',)
#+END_SRC

可以通过调转顺序来 *解包*
# x, y, z = t
必须保证变量个数与元组对得上.

** 集合
集合定义无序不重复元素集,支持合,交,差,和对称差操作
空集合只能通过set()来定义,有元素的可以通过{1, 2}来定义
#+BEGIN_SRC python
  basket = {'apple', 'orange', 'apple', 'pear', 'orange' 'banana'}
  print(basket)
  # {'orange', 'apple', 'orangebanana', 'pear'}
  'apple' in basket
  # True
  a = set('abracdabra')
  b = set('alacazam')
  # a ==> {'a', 'r', 'b', 'c', 'd'}
  a - b
  # {'r', 'b', 'd'}
  a | b
  # ['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
  a & b
  # {'a', 'c'}
  a ^ b 
  # {'r', 'd', 'b', 'm', 'z', 'l'} a或b中只有一个有的字母
  a = {x for x in 'abracadabra' if x not in 'abc'}
  # a ==> {'r', 'd'}
#+END_SRC

** 字典
即关联数组,字典可以通过键来索引,并且键只能是任意不可变类型,故列表或是
直接/间接包含可变的元组都不可以作为键

字典可以看作是没有顺序的元素为 key:value 的集合
对已存在的键存储会覆盖原来的值.del可以删除一个key:value对,提取一个不存
在的key会报错,in可以用于检测某个键是否存在

list(d.keys())会返回键的列表,其顺序不确定

dict()可以从key value对序列里直接生成字典
#+BEGIN_SRC python
  tel = {'jack':4098, 'sape': 4139}
  tel['guido'] = 4127 # 插入新对
  tel['jack']
  # 4098
  del tel['sape']
  tel['irv'] = 4127
  # tel = {'jack':4098, 'irv': 4127, 'guido': 4127}
  list(tel.keys())
  # ['irv', 'guido', 'jack']
  'guido' in tel
  # True
  'jack' not in tel
  # False

  dict(sape=4139, guido=4127, jack=4098)
  dict([(x, x**2) for x in (2, 4, 6)])
  # {2: 4, 4: 16, 6:36}
#+END_SRC

** 遍历技巧
对字典遍历时,可以使用 items() 方法获取键值对
enumerate() 则可以同时获取索引和值
对两个或多个的序列进行遍历时可以使用zip进行组合
sorted和reversed会返回新的序列

#+BEGIN_SRC python
  knights = {'gallahad': 'the pure', 'robin': 'the brave'}
  for k, v in knights.items():
      print(k, v)

  for i, v in enumerate(['tic', 'tac', 'toe']):
      print(i, v)
  # 0 tic
  # 1 tac
  # 2 toe

  a=[1,2,3]
  b=[4,5,6]
  for x, y in zip(a,b):
      print('x is {0}, y is {1}'.format(x,y))
  # x is 1, y is 4
  # x is 2, y is 5
  # x is 3, y is 6

  sorted(a)
  reversed(b)
#+END_SRC

** 深入条件控制
- while和if中的条件可以包含任何操作符,而不仅仅是比较
- in 和 not in 检查一个值是否在序列中
- is 和 not is 检查两个对象是否为同一个,只对可变对象有用
- 所有比较操作符具有相同的优先级,且低于数值操作
- 比较符可以接连使用,如a<b==c测试a小于b且b等于c
- not and or 优先级递减,且都小于比较符
- and 和 or 不一定会计算右值
  # non_null = string1 or string2 or string3
- 赋值不可以出现在表达式内部, 避免 == 写错成 =

** 序列与其它类型的比较
- 顺序比较两个序列的项
- 如果项也是序列,则递归比较
- 所有项相等,则它们相等
- 如果a是b的子序列,a<b

如果比较的是两个不同的类型,且它们没有合适的比较方法,则会抛出TypeError
异常.



* 模块
用户可以把定义存放在文件里,同时又能在脚本或交互式环境下方便地使用它们,
这样的文件称为 *模块*.
一个模块的定义可以 *导入* 到另一个模块或主模块(即执行脚本的最上层或计
算模式下的一组可访问变量的集合).

文件名即模块名+.py
在一个模块中,模块的名字字符串可以通过全局变量 *__name__* 得到.

通过 =import xxx= 导入后,则可以 =xxx.functionA(xx)= 来调用模块中的函数.注
意需要使用模块名前缀来调用函数,因而 *不会覆盖当前的符号表*. 如果需要频繁
使用一个函数,可以将其赋给一个变量.

** 深入模块
模块还可以包含可执行的语句.这些语句一般用以初始化模块.
*它们仅在模块第一次被导入时才执行*
可以使用 =import imp;imp.reload(modulename)= 从而避免每次修改模块后都
要重启解释器.


每个模块有私有的符号表,由模块内部定义的函式当成全局符号表来使用,不用担
心冲突. 调用者可以使用 =modname.itemname= 的形式来访问模块的全局变量.

import按惯例应当放在一个模块的最开始.
#+BEGIN_SRC python
  # 以下方式不会导入相应的模块名fibo
  from fibo import fib, fib2
  fib(500)

  # 以下将导入除了以下划线开头的所有名字.
  # 通常不用这个方式,因为它可能导入一些未知的名字到解释器里,
  # 从而可能会意外重载一些你已经定义的东西
  from fibo import *
#+END_SRC

*** 把模块当脚本执行
当使用 =python fibo.py <arguments>= 运行一个Python模块时,模块中的代码
就会被执行,就像被导入时一样,但__name__会被设为 "*__main__*".
因此,通过在模块最后加入以下代码就能够把文件既当成脚本使用,也可以当成可
导入的模块使用,因为解析命令行的代码只有在模块被当成"主"时才会被直接运
行.
#+BEGIN_SRC python
  if __name__ == "__main__":
      import sys
      fib(int(sys.argv[1]))
#+END_SRC

模块常通过这种形式提供一些方便的用户接口,或用于测试

*** 模块搜索路径
在导入一个模块的时候,解释器会先试图在当前目录下查找同名的文件,若没有,
则会试图到 =sys.path= 给定的目录列表中寻找同名文件. =sys.path= 默认包
含以下位置
- 输入脚本的目录(或当前目录)
- PYTHONPATH (一个目录列表,其语法与shell中的PATH相同)
- 安装时的默认目录
  
Python程序可以修改这个变量. 另外通过上述顺序可知,相比于标准库中的模块,
自定义的同名模块会被优先导入.

*** 已编译的Python文件
为了减少使用了大量标准模块的小程序的启动时间,解释器在寻找模块名文件的
时候还会优先导入pyc(已编译字节)文件,其次才是py源文件. pyc文件会记录的
其py文件的版本信息,如果不匹配,pyc文件就会被忽略

一般不用特意自己去创建pyc文件. 每次源文件被成功编译后都会尝试把结果写
入到spc文件中. 在这时发生任何问题都不会抛出错误,其pyc文件会被辨识出是
无效而不会加载.

- 使用-O调用解释器时,代码将会被优化并存入到.pyo文件中. 移除assert语句;
  所有bytecode都会被优化;所有pyc文件被忽略
- 使用-OO调用,会进一步优化,移除__doc__字符串,生成更小的pyo文件,慎用
- 程序从pyc或pyo中读取时,仅提高载入速度,执行速度不变
- 在命令行中直接调用脚本运行时,编译后的字节码不会被写入到pyc或pyo中.因
  此,通过移动该脚本的大量代码到一个模块中,并由一个小的引导脚本来导入这
  个模块可以减少这个脚本的启动时间,也可以直接在命令行里直接命名一个pyc
  或pyo文件
- 对于同一个模块,可以只包含pyc或pyo文件而没有py文件
- 模块 *compileall* 可以为一个目录下的所有模块创建pyc文件(或pyo,当使
  用-O时).

** dir()函式
内建函式dir(modulename)返回一个有序字符串列表,可以用于找出一个模块里定
义了哪些名字.
- 不带参数时,则给出当前已定义的所有名字
- 想查看内建函式和变量名字可以使用 =dir(builtins)=

** 包
包是一种Python模块命名空间的组织方法(模块集),通过使用"带点号的模块名". 
模块可以避免全局变量的冲突,包则可以 *避免模块名的冲突*

例如一个包的典型结构为:
    sound                         顶级包
    ├── __init__.py            初始化这个声音包
    ├── formats/               文件格式转换子包
    │   ├── __init__.py
    │   ├── b.py
    │   └── a.py
    ├── filters/               过滤器子包
    │   ├── __init__.py
    │   ├── equalizer.py
    │   └── vocoder.py
    └── effects/               音效子包
        ├── __init__.py
        ├── echo.py
        └── surround.py

当导入这个包时,Python会搜索sys.path上的目录以寻找这个包的子目录

需要 *__init__.py* 文件来使得Python知道这个目录是一个包
它可以是一个 *空文件* ,也可以用来执行初始化代码,或是设置 __all__ 变量.

#+BEGIN_SRC python
  import sound.effects.echo    # 载入特定子模块,需要用全名来引用
  sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)

  from sound.effects import echo  # 另一种方法,可以不加包前缀使用
  echo.echofilter(input, output)

  from sound.effects.echo import echofilter # 又或是直接导入
#+END_SRC

当使用 =from package import item= 时,这个item可以是这个包的一个子模块(或
子包),也可以是其它的定义在这个包里的名字,如函式,类或变量.
import会先测试这个item是否在包晨定义,没有则假设它是一个模块并载入它.

但如果使用 =import item.subitem.subsubitem= 时,除最后的每一项都必须是包,
最后一项可以是模块或包,但不能是在之前项中定义的类,函式,或变量

*** 从包中导入*
直接地用 =from sound.effects import *=  导入所有子模块可能会花费很长的
时间,而且对子模块进行显式导入时,还可能引发意想不到的副作用

解决方法是包作者提供一个包的 *显式索引* . import会遵循以下约定
- 如果一个包的 __init__.py 代码定义了一个名为 *__all__* 的列表
- 当遇到 =from sound.effects import *= 时,它被用来作为导入的模块名字的
  列表

例如:
#+BEGIN_SRC python
  # 使用 from sound.effects import * 将会导入以下子模块
  __all__ = ["echo", "surround", "reverse"]
#+END_SRC
如果包没有导入*的用途,它可能不会设置这个变量.此时使用上述导入方
法,则python将会导入effect包,并确保导入所有出现在其init文件中的名字.

*使用 =from Package import specific_submodule= 是总是推荐的做法,除非正
在导入的模块需要使用的子模块与其他包中的子模块同名*

*** 内部包参考
可以独立地导入子包来获取兄弟包的子模块的引用.
如,sound.filters.vocoder 需要使用sound.effects包下的echo模块时,可以使
用 =from sound.effects import echo=

还可以用相对导入的方式
#+BEGIN_SRC python
  from . import echo
  from .. import formats
  from ..filters import equalizer
#+END_SRC

相对导入使用模块的__name__属性来决定模块在包结构中的位置。当__name__属
性不包含包信息（i.e. 没有用'.'表示的层次结构，比如'__main__'），则相对
导入将模块解析为顶层模块，而不管模块在文件系统中的实际位置。
app/
        __init__.py
        sub1/
                 __init__.py
                 mod1.py
         sub2/
                 __init__.py
                 mod2.py

尝试在mod1.py导入mod2.py，加入from ..sub2 import mod2。

直接在sub1目录下执行python mod1.py或在app目录下执行python sub1/mod1.py
将报错："Attempted relative import in non-package"。

在app目录下执行python -m sub1.mod1也将报错："Attempted relative import
beyond toplevel package"。

正确的做法是：在app上层目录执行python -m app.sub1.mod1，或者不要使用
from ..sub2 import mod2而改用其他方式（比如将sub2添加到sys.path）。

*** 多目录的包
包支持额外一个特殊的属性__path__
它在文件中的代码执行之前被初始化为一个列表, 包含保存在这个包
的__init__.py文件中目录名. 这个变量可以被更改这样做会影响以后对包中模
块和子包的搜索

虽然这个特性不经常需要但它可以用于扩展在一个包里发现的模块的集合
