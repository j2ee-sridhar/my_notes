(define (exponentiation? exp)
  (and (pair? exp)
       (eq? '^ (car exp))))

(define (base exp)
  (cadr exp))
(define (exponent exp)
  (caddr exp))
(define (make-exponention m1 m2)
  (cond ((=number? m1 0) 0)
        ((or (=number? m1 1) (=number? m2 0)) 1)
        ((=number? m2 1) m1)
        (else (list '^ m1 m2))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))))
        ((exponentiation? exp)
         (let ((u (base exp))
               (n (exponent exp)))
          (make-product (make-product
                         (make-exponention u
                                           (- n 1))
                         n)
                        (deriv u var))))
        (else (error "unknow expression type -- DERIV" exp))))
