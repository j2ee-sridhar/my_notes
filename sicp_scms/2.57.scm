(define (addend e)  (cadr e))
(define (augend e)
  (if (> (length (cddr e)) 1)
      (cons '+ (cddr e))
      (caddr e)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (append (list '+)
                      (if (sum? a1)
                          (cdr a1)
                          (list a1))
                      (if (sum? a2)
                          (cdr a2)
                          (list a2))))))

(define (multiplier e) (cadr e))
(define (multiplicand e)
  (if (> (length (cddr e)) 1)
      (cons '* (cddr e))
      (caddr e)))

(define (make-product m1 m2)
  (cond ((or (=number? m2 0) (=number? m1 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (append (list '*)
                      (if (product? m1)
                          (cddr m1)
                          (list m1))
                      (if (product? m2)
                          (cddr m2)
                          (list m2))))))

(deriv '(* x y (+ x 3)) 'x)
